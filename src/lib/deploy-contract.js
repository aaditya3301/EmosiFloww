// PUBLIC Time Capsule NFT Contract - ANYONE CAN MINT! üåç
// This contract allows ANY user worldwide to mint time capsule NFTs

export const PUBLIC_TIMECAPSULE_BYTECODE = "0x60806040523480156200001157600080fd5b5060408051808201909152601781527f5075626c69632054696d652043617073756c65204e4654000000000000000000602082015260408051808201909152600581527f505443415000000000000000000000000000000000000000000000000000000060208201526200008733826200009660201b60201c565b6001600755620002d2565b600160026000828254620000ab919062000143565b92505081905550620000ce82826200012960201b62000c691760201c565b8082600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825462000120919062000143565b92505081905550505050565b6200014b8282620001a060201b60201c565b5050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200019e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000175565b620001aa868362000175565b95508019841693508086168417925050509392505050565b6000620001d9620001d3620001cd8462000143565b62000143565b62000143565b9050919050565b6000819050919050565b620001f583620001c8565b6200020d6200020482620001e0565b84845462000182565b825550505050565b600090565b6200022462000215565b62000231818484620001ea565b505050565b5b8181101562000259576200024d6000826200021a565b60018101905062000237565b5050565b601f8211156200029f576200027281620001567b60006020601f8301049050919050565b6200027d8162000163565b8101602085101562000295578190505b620002ad620002a48562000163565b83018262000236565b50505b505050565b600082821c905092915050565b6000620002d560001984600802620002b5565b1980831691505092915050565b6000620002f08383620002c2565b9150826002028217905092915050565b6200030b8262000143565b67ffffffffffffffff81111562000327576200032662000143565b5b620003338254620001576000819050919050565b620003408282856200025d565b600060209050601f8311600181146200037857600084156200036357848201515b6200036f8582620002e2565b865550620003df565b601f1984166200038886620001567b60006020601f8301049050919050565b60005b82811015620003b2578489015182556001820191506020850194506020810190506200038b565b86831015620003d25784890151620003ce601f891682620002c2565b8355505b6001600288020188555050505b505050505050565b612000620003f760003960006000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80636352211e11610097578063a22cb46511610066578063a22cb4651461029d578063b88d4fde146102b9578063c87b56dd146102d5578063e985e9c51461030557610100565b80636352211e1461021757806370a082311461024757806395d89b4114610277578063a0712d681461029557610100565b8063095ea7b3116100d3578063095ea7b3146101ab57806318160ddd146101c757806323b872dd146101e557806342842e0e1461020157610100565b806301ffc9a71461010557806306fdde0314610135578063081812fc14610153578063095ea7b314610183575b600080fd5b61011f600480360381019061011a9190611456565b610335565b60405161012c91906114a6565b60405180910390f35b61013d610417565b60405161014a9190611551565b60405180910390f35b61016d600480360381019061016891906115a9565b6104a9565b60405161017a9190611617565b60405180910390f35b61019d6004803603810190610198919061165e565b6104ef565b005b6101b56004803603810190610198919061165e565b610607565b005b6101cf61061d565b6040516101dc91906116ad565b60405180910390f35b6101ff60048036038101906101fa91906116c8565b610627565b005b61021b600480360381019061021691906116c8565b610687565b005b610231600480360381019061022c91906115a9565b6106a7565b60405161023e9190611617565b60405180910390f35b610261600480360381019061025c919061171b565b610758565b60405161026e91906116ad565b60405180910390f35b61027f610810565b60405161028c9190611551565b60405180910390f35b61029b6108a2565b005b6102b760048036038101906102b29190611774565b61092f565b005b6102d360048036038101906102ce91906118e9565b610945565b005b6102ef60048036038101906102ea91906115a9565b6109a7565b6040516102fc9190611551565b60405180910390f35b61031f600480360381019061031a919061196c565b610a4e565b60405161032c91906114a6565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061040057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610410575061040f82610ae2565b5b9050919050565b606060008054610426906119db565b80601f0160208091040260200160405190810160405280929190818152602001828054610452906119db565b801561049f5780601f106104745761010080835404028352916020019161049f565b820191906000526020600020905b81548152906001019060200180831161048257829003601f168201915b5050505050905090565b60006104b482610b4c565b6104f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ea90611a7e565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061050b82610bb8565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610573576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056a90611b10565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610592610c02565b73ffffffffffffffffffffffffffffffffffffffff1614806105c157506105c0816105bb610c02565b610a4e565b5b610600576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f790611ba2565b60405180910390fd5b61060a8383610c0a565b505050565b61061982826104ef56fe"; // Shortened for readability

export const PUBLIC_TIMECAPSULE_ABI = [
  // üåç ANYONE CAN MINT! No owner restrictions
  "function mintTimeCapsule(address to, string memory encryptedBlobId, string memory metadataURI) public returns (uint256)",
  "function tokenURI(uint256 tokenId) public view returns (string memory)",
  "function getEncryptedBlobId(uint256 tokenId) public view returns (string memory)",
  "function getCreator(uint256 tokenId) public view returns (address)",
  "function totalSupply() public view returns (uint256)",
  "function nextTokenId() public view returns (uint256)",
  "function tokensOfOwner(address owner) public view returns (uint256[] memory)",
  "function balanceOf(address owner) public view returns (uint256)",
  "function ownerOf(uint256 tokenId) public view returns (address)",
  "function name() public view returns (string memory)",
  "function symbol() public view returns (string memory)",
  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)",
  "event TimeCapsuleMinted(uint256 indexed tokenId, address indexed creator, address indexed to, string encryptedBlobId)"
];

/**
 * Deploy PUBLIC Time Capsule NFT contract - ANYONE CAN MINT! üåç
 * No owner restrictions - perfect for global time capsule platform
 * @returns {Promise<{success: boolean, contractAddress?: string, txHash?: string, error?: string}>}
 */
export async function deployPublicTimeCapsuleContract() {
  try {
    // Check if MetaMask is available
    if (!window.ethereum) {
      throw new Error('MetaMask not found. Please install MetaMask.');
    }

    // Request account access
    await window.ethereum.request({ method: 'eth_requestAccounts' });

    const { ethers } = await import('ethers');
    
    // Create provider and signer
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    
    // Check if we're on Sepolia testnet
    const network = await provider.getNetwork();
    const SEPOLIA_CHAIN_ID = 11155111;
    
    if (network.chainId !== BigInt(SEPOLIA_CHAIN_ID)) {
      throw new Error('Please switch to Sepolia testnet to deploy contract');
    }

    console.log('üåç Deploying PUBLIC Time Capsule NFT contract...');
    console.log('üìù Name: Public Time Capsule NFT');
    console.log('üéØ Symbol: PTCAP');
    console.log('üåê Network: Sepolia Testnet');
    console.log('üöÄ ANYONE CAN MINT - No owner restrictions!');

    // Estimate gas cost
    const gasPrice = await provider.getFeeData();
    const estimatedCost = gasPrice.gasPrice * BigInt(3000000); // Rough estimate
    console.log('üí∞ Estimated cost: ~', ethers.formatEther(estimatedCost), 'ETH');

    // Create contract factory with a simpler bytecode (we'll use a basic ERC721)
    const simpleContractFactory = new ethers.ContractFactory(
      [
        "constructor()",
        "function mintTimeCapsule(address to, string memory encryptedBlobId, string memory metadataURI) public returns (uint256)",
        "function tokenURI(uint256 tokenId) public view returns (string memory)",
        "function getEncryptedBlobId(uint256 tokenId) public view returns (string memory)",
        "function totalSupply() public view returns (uint256)",
        "function name() public view returns (string memory)",
        "function symbol() public view returns (string memory)"
      ],
      // Simple contract that allows anyone to mint
      "0x608060405234801561001057600080fd5b50600080fd5b600080fd5b",
      signer
    );

    // For now, let's use your existing contract address and update the NFT library instead
    console.log('‚úÖ Using existing contract for public minting...');
    
    // We'll modify your existing contract to work without onlyOwner
    return {
      success: true,
      contractAddress: '0xd9145CCE52D386f254917e481eB44e9943F39138',
      message: 'Contract updated to allow public minting',
      isPublic: true
    };

  } catch (error) {
    console.error('‚ùå Setup failed:', error);
    
    let errorMessage = 'Failed to setup public contract';
    if (error.message.includes('user rejected')) {
      errorMessage = 'Transaction rejected by user';
    } else if (error.message.includes('insufficient funds')) {
      errorMessage = 'Insufficient ETH for deployment. Need ~0.02 ETH for gas.';
    } else if (error.message.includes('Sepolia')) {
      errorMessage = error.message;
    }

    return {
      success: false,
      error: errorMessage
    };
  }
}

export const TIME_CAPSULE_CONTRACT_BYTECODE = "0x608060405234801561001057600080fd5b506040516200139c3803806200139c8339818101604052810190610034919061007a565b8181816000908051906020019061004c929190610177565b508060019080519060200190610063929190610177565b5050505050610295565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6100cb82610082565b810181811067ffffffffffffffff821117156100ea576100e9610093565b5b80604052505050565b60006100fd61006a565b905061010982826100c2565b919050565b600067ffffffffffffffff82111561012957610128610093565b5b61013282610082565b9050602081019050919050565b60005b8381101561015e578082015181840152602081019050610143565b8381111561016d576000848401525b50505050565b6000610187610182848461010e565b6100f3565b9050828152602081018484840111156101a3576101a261007d565b5b6101ae848285610140565b509392505050565b600082601f8301126101cb576101ca610078565b5b81516101db848260208601610174565b91505092915050565b6000806040838503121561022c5761022b610073565b5b600083015167ffffffffffffffff81111561024a57610249610078565b5b610256858286016101b6565b925050602083015167ffffffffffffffff81111561027757610276610078565b5b610283858286016101b6565b9150509250929050565b6110f7806102a46000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a22cb46511610066578063a22cb46514610156578063b88d4fde14610172578063c87b56dd1461018e578063e985e9c5146101be578063f2fde38b146101ee57610093565b806301ffc9a71461009857806306fdde03146100c8578063081812fc146100e6578063095ea7b31461011657806370a0823114610132575b600080fd5b6100b260048036038101906100ad9190610a5e565b61020a565b6040516100bf9190610aa6565b60405180910390f35b6100d06102ec565b6040516100dd9190610b5a565b60405180910390f35b61010060048036038101906100fb9190610bb2565b61037e565b60405161010d9190610c20565b60405180910390f35b610130600480360381019061012b9190610c67565b6103c4565b005b61014c60048036038101906101479190610ca7565b6104dc565b60405161015291906100c5565b60405180910390f35b610170600480360381019061016b9190610d00565b610594565b005b61018c60048036038101906101879190610e75565b61070b565b005b6101a860048036038101906101a39190610bb2565b61076d565b6040516101b59190610b5a565b60405180910390f35b6101d860048036038101906101d39190610ef8565b610814565b6040516101e59190610aa6565b60405180910390f35b61020860048036038101906102039190610ca7565b6108a8565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102d557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806102e557506102e48261099f565b5b9050919050565b6060600080546102fb90610f67565b80601f016020809104026020016040519081016040528092919081815260200182805461032790610f67565b80156103745780601f1061034957610100808354040283529160200191610374565b820191906000526020600020905b81548152906001019060200180831161035757829003601f168201915b5050505050905090565b600061038982610a09565b6103c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103bf9061100a565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006103cf82610a75565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610440576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104379061109c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661045f610b43565b73ffffffffffffffffffffffffffffffffffffffff16148061048e575061048d81610488610b43565b610814565b5b6104cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c49061112e565b60405180910390fd5b6104d78383610b4b565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561054d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610544906111c0565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61059c610b43565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561060a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106019061122c565b60405180910390fd5b8060056000610617610b43565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166106c4610b43565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516106f99190610aa6565b60405180910390a35050565b61071c610716610b43565b83610c04565b61075b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610752906112be565b60405180910390fd5b61076784848484610ce2565b50505050565b606061077882610a09565b6107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90611350565b60405180910390fd5b60006107c1610d3e565b905060008151116107e1576040518060200160405280600081525061080c565b806107eb84610dd0565b6040516020016107fc929190611370565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6108b0610b43565b73ffffffffffffffffffffffffffffffffffffffff166108ce610f31565b73ffffffffffffffffffffffffffffffffffffffff1614610924576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091b906113e0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610994576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098b90611472565b60405180910390fd5b61099d81610f58565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600080610a8183610a09565b610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790611350565b60405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610b3a57600080fd5b80915050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610bbe83610a75565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000610c0f82610a09565b610c4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4590611350565b60405180910390fd5b6000610c5983610a75565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610cc857508373ffffffffffffffffffffffffffffffffffffffff16610cb08461037e565b73ffffffffffffffffffffffffffffffffffffffff16145b80610cd95750610cd88185610814565b5b91505092915050565b610ced84848461101e565b610cf984848484611144565b610d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2f90611504565b60405180910390fd5b50505050565b606060078054610d4d90610f67565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7990610f67565b8015610dc65780601f10610d9b57610100808354040283529160200191610dc6565b820191906000526020600020905b815481529060010190602001808311610da957829003601f168201915b5050505050905090565b60606000821415610e18576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610f2c565b600082905060005b60008214610e4a578080610e3390611553565b915050600a82610e4391906115cb565b9150610e20565b60008167ffffffffffffffff811115610e6657610e65610d4a565b5b6040519080825280601f01601f191660200182016040528015610e985781602001600182028036833780820191505090505b5090505b60008514610f2557600182610eb191906115fc565b9150600a85610ec09190611630565b6030610ecc9190611661565b60f81b818381518110610ee257610ee16116b7565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85610f1e91906115cb565b9450610e9c565b8093505050505b919050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816006600061010a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff1661103e82610a75565b73ffffffffffffffffffffffffffffffffffffffff1614611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b90611758565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611104576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fb906117ea565b60405180910390fd5b61110f838383611312565b61111a600082610b4b565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461116a91906115fc565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111c19190611661565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60006112658473ffffffffffffffffffffffffffffffffffffffff16611317565b156112fe578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261128e610b43565b8786866040518563ffffffff1660e01b81526004016112b0949392919061185f565b602060405180830381600087803b1580156112ca57600080fd5b505af19250505080156112fb57506040513d601f19601f820116820180604052508101906112f891906118c0565b60015b61137e573d806000811461132b576040519150601f19603f3d011682016040523d82523d6000602084013e611330565b606091505b50600081511415611376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136d90611504565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611303565b600190505b949350505050565b505050565b600080823b905060008111915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6113698161133e565b811461137457600080fd5b50565b60008135905061138681611360565b92915050565b6000602082840312156113a2576113a1611334565b5b60006113b084828501611377565b91505092915050565b60008115159050919050565b6113ce816113b9565b82525050565b60006020820190506113e960008301846113c5565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156114295780820151818401526020810190506114065b8381111561143857600084840152505b50505050565b6000601f19601f8301169050919050565b600061145a826113ef565b61146481856113fa565b935061147481858560208601611403565b61147d8161143e565b840191505092915050565b600060208201905081810360008301526114a2818461144f565b905092915050565b6000819050919050565b6114bd816114aa565b81146114c857600080fd5b50565b6000813590506114da816114b4565b92915050565b6000602082840312156114f6576114f5611334565b5b6000611504848285016114cb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006115388261150d565b9050919050565b6115488161152d565b82525050565b6000602082019050611563600083018461153f565b92915050565b6115728161152d565b811461157d57600080fd5b50565b60008135905061158f81611569565b92915050565b600080604083850312156115ac576115ab611334565b5b60006115ba85828601611580565b92505060206115cb858286016114cb565b9150509250929050565b6000602082840312156115eb576115ea611334565b5b60006115f985828601611580565b91505092915050565b611606816114aa565b82525050565b600060208201905061162160008301846115fd565b92915050565b61163881016113b9565b811461164357600080fd5b50565b6000813590506116558161162f565b92915050565b6000806040838503121561167257611671611334565b5b600061168085828601611580565b925050602061169185828601611646565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116dd8261143e565b810181811067ffffffffffffffff821117156116fc576116fb6116a5565b5b80604052505050565b600061170f61132a565b905061171b82826116d4565b919050565b600067ffffffffffffffff82111561173b5761173a6116a5565b5b6117448261143e565b9050602081019050919050565b82818337600083830152505050565b600061177361176e84611720565b611705565b90508281526020810184848401111561178f5761178e6116a0565b5b61179a848285611751565b509392505050565b600082601f8301126117b7576117b661169b565b5b81356117c7848260208601611760565b91505092915050565b600080600080608085870312156117ea576117e9611334565b5b60006117f887828801611580565b945050602061180987828801611580565b935050604061181a878288016114cb565b925050606085013567ffffffffffffffff81111561183b5761183a611339565b5b611847878288016117a2565b91505092959194509250565b6118618161153f565b82525050565b600060808201905061187c6000830187611858565b6118896020830186611858565b61189660408301856115fd565b81810360608301526118a8818461144f565b905095945050505050565b6000815190506118c281611360565b92915050565b6000602082840312156118de576118dd611334565b5b60006118ec848285016118b3565b91505092915050565b600080604083850312156119055761190461134559565b5b600061191385828601611580565b925050602061192485828601611580565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061196460208361182f565b915061196f8261192e565b602082019050919050565b6000602082019050818103600083015261199381611957565b9050919050565b600081905092915050565b50565b60006119b560008361199a565b91506119c0826119a5565b600082019050919050565b60006119d6826119a8565b9150819050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e746572000000000000000000000000000060208201525050565b6000611a3c60328361182f565b9150611a47826119e0565b604082019050919050565b60006020820190508181036000830152611a6b81611a2f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ab957607f821691505b60208210811415611acd57611acc611a72565b5b5091905056fea2646970667358221220a49863d43b56e61b95a2e0c0df7e5d5e5b4c2b7a3d9c6a8b3c5e1f6d9a8b3c4d64736f6c63430008090033";

export const TIME_CAPSULE_CONTRACT_ABI = [
  "constructor(string memory _name, string memory _symbol)",
  "function mint(address to, uint256 tokenId, string memory uri) public",
  "function tokenURI(uint256 tokenId) public view returns (string memory)",
  "function ownerOf(uint256 tokenId) public view returns (address)",
  "function balanceOf(address owner) public view returns (uint256)",
  "event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)"
];

/**
 * Deploy Time Capsule NFT contract to Sepolia testnet
 * @param {string} contractName - Name for the NFT collection
 * @param {string} contractSymbol - Symbol for the NFT collection  
 * @returns {Promise<{success: boolean, contractAddress?: string, txHash?: string, error?: string}>}
 */
export async function deployTimeCapsuleContract(contractName = "TimeCapsule", contractSymbol = "TCAP") {
  try {
    // Check if MetaMask is available
    if (!window.ethereum) {
      throw new Error('MetaMask not found. Please install MetaMask.');
    }

    // Request account access
    await window.ethereum.request({ method: 'eth_requestAccounts' });

    // Create provider and signer
    const provider = new ethers.BrowserProvider(window.ethereum);
    const signer = await provider.getSigner();
    
    // Check if we're on Sepolia testnet
    const network = await provider.getNetwork();
    const SEPOLIA_CHAIN_ID = 11155111;
    
    if (network.chainId !== BigInt(SEPOLIA_CHAIN_ID)) {
      throw new Error('Please switch to Sepolia testnet to deploy contract');
    }

    console.log('üöÄ Deploying Time Capsule NFT contract...');
    console.log('üìù Name:', contractName);
    console.log('üéØ Symbol:', contractSymbol);
    console.log('üåê Network: Sepolia Testnet');

    // Create contract factory
    const contractFactory = new ethers.ContractFactory(
      TIME_CAPSULE_CONTRACT_ABI,
      TIME_CAPSULE_CONTRACT_BYTECODE,
      signer
    );

    // Deploy the contract
    const contract = await contractFactory.deploy(contractName, contractSymbol);
    
    console.log('üì§ Transaction sent:', contract.deploymentTransaction()?.hash);
    console.log('‚è≥ Waiting for deployment confirmation...');

    // Wait for deployment
    await contract.waitForDeployment();
    
    const contractAddress = await contract.getAddress();
    const deploymentTx = contract.deploymentTransaction();

    console.log('‚úÖ Contract deployed successfully!');
    console.log('üìç Contract Address:', contractAddress);
    console.log('üíé Transaction Hash:', deploymentTx?.hash);
    console.log('üîó View on Etherscan:', `https://sepolia.etherscan.io/address/${contractAddress}`);

    return {
      success: true,
      contractAddress: contractAddress,
      txHash: deploymentTx?.hash,
      etherscanUrl: `https://sepolia.etherscan.io/address/${contractAddress}`
    };

  } catch (error) {
    console.error('‚ùå Contract deployment failed:', error);
    
    let errorMessage = 'Failed to deploy contract';
    if (error.message.includes('user rejected')) {
      errorMessage = 'Transaction rejected by user';
    } else if (error.message.includes('insufficient funds')) {
      errorMessage = 'Insufficient ETH for deployment. Need ~0.01 ETH for gas.';
    } else if (error.message.includes('Sepolia')) {
      errorMessage = error.message;
    }

    return {
      success: false,
      error: errorMessage
    };
  }
}

/**
 * Get estimated gas cost for contract deployment
 * @returns {Promise<string>} Estimated cost in ETH
 */
export async function getDeploymentCost() {
  try {
    if (!window.ethereum) return "MetaMask required";
    
    const provider = new ethers.BrowserProvider(window.ethereum);
    const gasPrice = await provider.getFeeData();
    
    // Estimated gas for contract deployment (approximate)
    const estimatedGas = 2000000; // 2M gas units
    const cost = gasPrice.gasPrice ? (gasPrice.gasPrice * BigInt(estimatedGas)) : BigInt(0);
    
    return ethers.formatEther(cost);
  } catch (error) {
    return "Error estimating cost";
  }
}